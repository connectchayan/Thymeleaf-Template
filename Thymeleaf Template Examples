import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.Mockito.*;

class GithubServiceTest {

    @Mock
    private GithubAuthService githubAuthService;

    @Mock
    private GitHubWebClientService gitHubWebClientService;

    @InjectMocks
    private GithubService githubService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void processBatch_FetchBranchByNameExists_CallsCommitFile() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        GithubBranchResponse branchResponse = new GithubBranchResponse();
        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.just(branchResponse));
        when(githubService.commitFile(any(), any())).thenReturn(Mono.just(new GithubUploadResponse()));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectNextCount(1)
                .verifyComplete();

        verify(githubService, times(1)).commitFile(any(), any());
    }

    @Test
    void processBatch_FetchBranchByNameNotFound_CallsGetShaAndCreateBranchThenCommitFile() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.error(WebClientResponseException.create(HttpStatus.NOT_FOUND).build()));
        when(githubService.fetchDevelopmentSHA()).thenReturn(Mono.just(new GithubBranchResponse()));
        when(githubService.createBranch(any(), any())).thenReturn(Mono.just(new GithubBranchResponse()));
        when(githubService.commitFile(any(), any())).thenReturn(Mono.just(new GithubUploadResponse()));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectNextCount(1)
                .verifyComplete();

        verify(githubService, times(1)).createBranch(any(), any());
        verify(githubService, times(1)).commitFile(any(), any());
    }

    @Test
    void processBatch_ErrorOccurs_ThrowsResponseStatusException() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.error(new RuntimeException("Error")));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectErrorMatches(throwable -> throwable instanceof ResponseStatusException &&
                        ((ResponseStatusException) throwable).getStatus() == HttpStatus.BAD_REQUEST &&
                        throwable.getMessage().equals("Error"))
                .verify();

        verify(githubService, never()).createBranch(any(), any());
        verify(githubService, never()).commitFile(any(), any());
    }
}
