import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.Mockito.*;

class GithubServiceTest {

    @Mock
    private GithubAuthService githubAuthService;

    @Mock
    private GitHubWebClientService gitHubWebClientService;

    @InjectMocks
    private GithubService githubService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void processBatch_FetchBranchByNameExists_CallsCommitFile() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        GithubBranchResponse branchResponse = new GithubBranchResponse();
        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.just(branchResponse));
        when(githubService.commitFile(any(), any())).thenReturn(Mono.just(new GithubUploadResponse()));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectNextCount(1)
                .verifyComplete();

        verify(githubService, times(1)).commitFile(any(), any());
    }

    @Test
    void processBatch_FetchBranchByNameNotFound_CallsGetShaAndCreateBranchThenCommitFile() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.error(WebClientResponseException.create(HttpStatus.NOT_FOUND).build()));
        when(githubService.fetchDevelopmentSHA()).thenReturn(Mono.just(new GithubBranchResponse()));
        when(githubService.createBranch(any(), any())).thenReturn(Mono.just(new GithubBranchResponse()));
        when(githubService.commitFile(any(), any())).thenReturn(Mono.just(new GithubUploadResponse()));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectNextCount(1)
                .verifyComplete();

        verify(githubService, times(1)).createBranch(any(), any());
        verify(githubService, times(1)).commitFile(any(), any());
    }

    @Test
    void processBatch_ErrorOccurs_ThrowsResponseStatusException() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.error(new RuntimeException("Error")));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectErrorMatches(throwable -> throwable instanceof ResponseStatusException &&
                        ((ResponseStatusException) throwable).getStatus() == HttpStatus.BAD_REQUEST &&
                        throwable.getMessage().equals("Error"))
                .verify();

        verify(githubService, never()).createBranch(any(), any());
        verify(githubService, never()).commitFile(any(), any());
    }
}


import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.io.IOException;

class GitHubWebClientServiceTest {

    private GitHubWebClientService gitHubWebClientService;
    private MockWebServer mockWebServer;

    @BeforeEach
    void setUp() throws IOException {
        // Create a MockWebServer instance
        mockWebServer = new MockWebServer();

        // Start the server
        mockWebServer.start();

        // Get the server URL
        String baseUrl = mockWebServer.url("/").toString();

        // Create a WebClient.Builder instance with the server URL
        WebClient.Builder webClientBuilder = WebClient.builder().baseUrl(baseUrl);

        // Create a GitHubApiConfiguration instance
        GitHubApiConfiguration gitHubApiConfiguration = new GitHubApiConfiguration(baseUrl);

        // Create an instance of the service under test
        gitHubWebClientService = new GitHubWebClientService(webClientBuilder, gitHubApiConfiguration);
    }

    @AfterEach
    void tearDown() throws IOException {
        // Shutdown the MockWebServer
        mockWebServer.shutdown();
    }

    @Test
    void fetchBranchByName_ShouldReturnBranchResponse() {
        // Mock input values
        String ref = "branch-name";
        AccessToken accessToken = new AccessToken("your-access-token");
        String owner = "your-owner";
        String repo = "your-repo";

        // Set up the mock server response
        String responseBody = "{\"name\": \"branch-name\"}";
        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .setBody(responseBody));

        // Execute the method and verify the response using StepVerifier
        Mono<GithubBranchResponse> resultMono = gitHubWebClientService.fetchBranchByName(ref, accessToken, owner, repo);
        StepVerifier.create(resultMono)
                .expectNextMatches(response -> response.getName().equals(ref))
                .verifyComplete();
    }
}

===================================================================================================================================

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.Mockito.*;

@SpringBootTest
class GitHubWebClientServiceTest {

    private GitHubWebClientService gitHubWebClientService;

    @Mock
    private GitHubApiConfiguration gitHubApiConfiguration;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        gitHubWebClientService = new GitHubWebClientService(gitHubApiConfiguration);
    }

    @Test
    void retrieveAccessToken_ShouldReturnAccessToken() {
        // Mock the required dependencies
        String accessTokenUrl = "https://example.com/access-token";
        when(gitHubApiConfiguration.getAccessTokenUrl()).thenReturn(accessTokenUrl);

        // Define the expected access token response
        AccessToken expectedAccessToken = new AccessToken("test-token");

        // Execute the method and verify the response using StepVerifier
        Mono<AccessToken> resultMono = gitHubWebClientService.retrieveAccessToken();
        StepVerifier.create(resultMono)
                .expectNext(expectedAccessToken)
                .verifyComplete();

        // Verify that the expected API configuration method was called
        verify(gitHubApiConfiguration, times(1)).getAccessTokenUrl();
    }
}
=============================================================================================================
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.io.IOException;

import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
class GitHubWebClientServiceTest {

    private MockWebServer mockWebServer;
    private GitHubWebClientService gitHubWebClientService;

    @Mock
    private WebClient.Builder webClientBuilder;

    @BeforeEach
    void setup() throws IOException {
        mockWebServer = new MockWebServer();
        mockWebServer.start();
        GitHubApiConfiguration gitHubApiConfiguration = new GitHubApiConfiguration();
        gitHubApiConfiguration.setBaseUrl(mockWebServer.url("/").toString());
        gitHubWebClientService = new GitHubWebClientService(webClientBuilder, gitHubApiConfiguration);
    }

    @AfterEach
    void tearDown() throws IOException {
        mockWebServer.shutdown();
    }

    @Test
    void fetchBranchByName_ShouldReturnBranchResponse() {
        // Mock the required dependencies
        String ref = "test-ref";
        String owner = "test-owner";
        String repo = "test-repo";
        String token = "test-token";

        // Configure the mock server response
        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .setBody("{\"name\": \"test-branch\"}"));

        // Configure the mock behavior of WebClient.Builder
        WebClient webClient = WebClient.builder()
                .baseUrl(mockWebServer.url("/").toString())
                .defaultHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)
                .build();
        when(webClientBuilder.baseUrl(mockWebServer.url("/").toString())).thenReturn(webClientBuilder);
        when(webClientBuilder.defaultHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)).thenReturn(webClientBuilder);
        when(webClientBuilder.build()).thenReturn(webClient);

        // Execute the method under test
        Mono<GithubBranchResponse> result = gitHubWebClientService.fetchBranchByName(ref, new AccessToken(token));

        // Verify the result using StepVerifier
        StepVerifier.create(result)
                .expectNextMatches(response -> response.getName().equals("test-branch"))
                .verifyComplete();
    }

    // Add more test cases for other methods in GitHubWebClientService
}
====================================================================================================================================

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class GitHubWebClientServiceTest {

    @Mock
    private WebClient.Builder webClientBuilder;

    @Mock
    private GitHubApiConfiguration gitHubApiConfiguration;

    @Mock
    private WebClient.RequestHeadersUriSpec<?> requestHeadersUriSpec;

    @Mock
    private WebClient.RequestHeadersSpec<?> requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @Test
    void fetchBranchByName_ShouldReturnBranchResponse() {
        // Mock the required dependencies
        String ref = "test-ref";
        String owner = "test-owner";
        String repo = "test-repo";
        String token = "test-token";

        GitHubWebClientService gitHubWebClientService = new GitHubWebClientService(webClientBuilder, gitHubApiConfiguration);
        
        // Mock the behavior of the dependencies
        when(gitHubApiConfiguration.getBaseUrl()).thenReturn("http://example.com");
        when(webClientBuilder.baseUrl("http://example.com")).thenReturn(webClientBuilder);
        when(webClientBuilder.defaultHeader(HttpHeaders.ACCEPT, "application/vnd.github.v3+json")).thenReturn(webClientBuilder);
        when(webClientBuilder.build()).thenReturn(WebTestClient.bindToController(gitHubWebClientService).build().mutate().baseUrl("http://example.com").build());
        when(webClientBuilder.defaultHeader("Authorization", "Bearer " + token)).thenReturn(webClientBuilder);
        when(webClientBuilder.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri("/repos/{owner}/{repo}/branches/{ref}", owner, repo, ref)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.header(HttpHeaders.ACCEPT, "application/vnd.github.v3+json")).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.header("Authorization", "Bearer " + token)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(GithubBranchResponse.class)).thenReturn(Mono.just(new GithubBranchResponse()));

        // Execute the method under test
        Mono<GithubBranchResponse> result = gitHubWebClientService.fetchBranchByName(ref, new AccessToken(token));

        // Verify the result using StepVerifier
        StepVerifier.create(result)
                .expectNextCount(1)
                .verifyComplete();
    }
===========================================================================================================================================================================


import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.assertEquals;

class DateUtilTest {

    @Test
    void convertLongToLocalDateTime() {
        long timeInMillis = 1626156000000L; // Example timestamp for 2021-07-13 12:00:00 UTC
        LocalDateTime expectedDateTime = LocalDateTime.of(2021, 7, 13, 12, 0, 0);

        LocalDateTime resultDateTime = DateUtil.convertLongToLocalDateTime(timeInMillis);

        assertEquals(expectedDateTime, resultDateTime);
    }

    @Test
    void convertLocalDateTimeToLong() {
        LocalDateTime dateTime = LocalDateTime.of(2021, 7, 13, 12, 0, 0);
        long expectedTimeInMillis = 1626156000000L; // Example timestamp for 2021-07-13 12:00:00 UTC

        long resultTimeInMillis = DateUtil.convertLocalDateTimeToLong(dateTime);

        assertEquals(expectedTimeInMillis, resultTimeInMillis);
    }

    @Test
    void convertStringToLocalDateTime() {
        String date = "2021-07-13";
        String format = "yyyy-MM-dd";
        LocalDateTime expectedDateTime = LocalDateTime.of(2021, 7, 13, 0, 0, 0);

        LocalDateTime resultDateTime = DateUtil.convertStringToLocalDateTime(date, format);

        assertEquals(expectedDateTime, resultDateTime);
    }

    @Test
    void convertStringToLong() {
        String date = "2021-07-13 12:00:00";
        String format = "yyyy-MM-dd HH:mm:ss";
        long expectedTimeInMillis = 1626156000000L; // Example timestamp for 2021-07-13 12:00:00 UTC

        long resultTimeInMillis = DateUtil.convertStringToLong(date, format);

        assertEquals(expectedTimeInMillis, resultTimeInMillis);
    }
}

    // Add more test cases for other methods in GitHubWebClientService
}

function applySelected() {
        // Get the reference to the table
        var table = document.getElementById("myTable");

        // Iterate through each row in the table
        for (var i = 0; i < table.rows.length; i++) {
            // Check if the checkbox in the current row is selected
            var checkbox = table.rows[i].cells[0].getElementsByTagName("input")[0];
            
            if (checkbox.checked) {
                // Clone the selected row
                var newRow = table.rows[i].cloneNode(true);

                // Clear the checkbox in the cloned row
                newRow.cells[0].getElementsByTagName("input")[0].checked = false;

                // Append the cloned row to the table
                table.appendChild(newRow);
            }
        }
    }


function applySelected() {
    // Get the reference to the table
    var table = document.getElementById("myTable");

    // Iterate through each row in the table
    for (var i = 0; i < table.rows.length; i++) {
        // Check if the checkbox in the current row is selected
        var checkbox = null;
        var currentRow = table.rows[i];

        // Ensure the current row exists
        if (currentRow) {
            // Find the checkbox by iterating over the child elements
            for (var j = 0; j < currentRow.cells[0].children.length; j++) {
                var childElement = currentRow.cells[0].children[j];
                if (childElement.tagName === "INPUT" && childElement.type === "checkbox" && childElement.id.startsWith("checkbox")) {
                    checkbox = childElement;
                    break;
                }
            }
        }

        // If the checkbox is checked, proceed with cloning
        if (checkbox && checkbox.checked) {
            console.log("Selected row index:", i);

            // Clone the selected row
            var newRow = currentRow.cloneNode(true);
            console.log("Cloning row:", newRow);

            // Clear the checkbox in the cloned row
            var clonedCheckbox = newRow.cells[0].querySelector("input[type='checkbox']");
            if (clonedCheckbox) {
                clonedCheckbox.checked = false;
                console.log("Clearing checkbox in cloned row:", newRow);
            } else {
                console.error("Checkbox not found in cloned row:", newRow);
            }

            // Append the cloned row to the table
            table.appendChild(newRow);
            console.log("Appending cloned row to the table:", newRow);
        }
    }
}

function applySelected() {
    // Iterate through checkboxes in the table
    for (var i = 1; i <= numRows; i++) {
        var checkboxId = 'checkbox' + i; // Assuming IDs are checkbox1, checkbox2, etc.
        var checkbox = document.getElementById(checkboxId);

        // Check if the checkbox is selected
        if (checkbox.checked) {
            // Get the corresponding row
            var selectedRow = checkbox.closest('tr');

            // Get values from the existing input fields outside the table
            var existingCoveragePCValue = document.getElementById('existingCoveragePC').value;
            var existingOverAllCovPCValue = document.getElementById('existingOverAllCovPC').value;

            // Update the target input fields in the new row
            document.getElementById('coveragePC').value = existingCoveragePCValue;
            document.getElementById('overAllCovPC').value = existingOverAllCovPCValue;

            // You can add more fields as needed
        }
    }
}

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class WebAutomationScript {

    public static void main(String[] args) {
        // Set the path to your ChromeDriver executable
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        // Initialize ChromeDriver
        WebDriver driver = new ChromeDriver();

        // Set implicit wait time to handle dynamic elements
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        try {
            // Open Microsoft Edge and navigate to the specified URL
            driver.get("https://yourwebsite.com");

            // Perform actions on the web page
            // e.g., click on a dropdown and select a value
            WebElement dropdown = driver.findElement(By.id("dropdownId"));
            // Perform other actions as needed

            // Click on the search button
            WebElement searchButton = driver.findElement(By.id("searchButtonId"));
            searchButton.click();

            // Locate the table and retrieve all rows
            List<WebElement> rows = driver.findElements(By.xpath("//table[@id='yourTableId']/tbody/tr"));

            // Iterate through each row and click on the hyperlink in the first cell
            for (WebElement row : rows) {
                WebElement hyperlink = row.findElement(By.xpath(".//td[1]/a"));
                hyperlink.click();

                // Perform actions on the approval page
                WebElement approvalButton = driver.findElement(By.id("approvalButtonId"));
                approvalButton.click();

                // Navigate back to the search results
                driver.navigate().back();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }
}

function getElementsByClassPrefix(prefix) {
    var allElements = document.getElementsByTagName('*');
    var elements = [];

    for (var i = 0; i < allElements.length; i++) {
        var classes = allElements[i].className.split(' ');
        for (var j = 0; j < classes.length; j++) {
            if (classes[j].indexOf(prefix) === 0) {
                elements.push(allElements[i]);
                break;
            }
        }
    }

    return elements;
}

public static String generateTable(List<Employee> employees) {
        StringBuilder html = new StringBuilder();

        html.append("<table border='1' style='border-collapse: collapse; width: 100%;'>");
        html.append("<thead style='background-color: lightgrey;'>") // Set header background color
            .append("<tr>")
            .append("<th>ID</th>")
            .append("<th>Name</th>")
            .append("<th>Department</th>")
            .append("<th>Salary</th>")
            .append("</tr>")
            .append("</thead>");
        html.append("<tbody>"); // Add tbody for better structure

        for (Employee employee : employees) {
            html.append("<tr>")
                .append("<td>").append(employee.getId()).append("</td>")
                .append("<td>").append(employee.getName()).append("</td>")
                .append("<td>").append(employee.getDepartment()).append("</td>")
                .append("<td>").append(employee.getSalary()).append("</td>")
                .append("</tr>");
        }

        html.append("</tbody>");
        html.append("</table>");

        return html.toString();
    }

SELECT 
    obh.transaction_id AS transactionId, 
    obh.obligation_nbr AS obligationNumber, 
    obh.product_type_code AS productTypeCode, 
    obh.gtfp_status_id AS status, 
    appev.gtfp_approval_event_id AS approvalEventId, 
    appev.creation_date AS approvalEventDate, 
    appev.approval_status_ind AS approvalStatusInd 
FROM 
    GTFP.OBLIGATION_HEADER obh 
JOIN 
    GTFP.GTFP_APPROVAL_EVENT appev 
ON 
    obh.transaction_id = appev.ref_key_id 
WHERE 
    obh.gtfp_status_id = 107 
ORDER BY 
    obh.transaction_id DESC;
=============================================================

String url = "https://jsonplaceholder.typicode.com/posts"; // Example URL
        String requestMethod = "GET"; // Use "POST", "PUT", or "DELETE" as needed

        try {
            // Create URL object
            URL apiUrl = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) apiUrl.openConnection();

            // Set request method
            connection.setRequestMethod(requestMethod);

            // Set request headers if needed
            connection.setRequestProperty("Accept", "application/json");
            connection.setRequestProperty("Content-Type", "application/json");

            // If making a POST or PUT request, send data in the body
            if ("POST".equalsIgnoreCase(requestMethod) || "PUT".equalsIgnoreCase(requestMethod)) {
                connection.setDoOutput(true);
                String jsonInput = "{ \"title\": \"foo\", \"body\": \"bar\", \"userId\": 1 }";
                try (OutputStream os = connection.getOutputStream()) {
                    os.write(jsonInput.getBytes());
                    os.flush();
                }
            }

            // Get response code
            int responseCode = connection.getResponseCode();
            System.out.println("Response Code: " + responseCode);

            // Read the response
            if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
                try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                    String inputLine;
                    StringBuilder response = new StringBuilder();

                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                    System.out.println("Response: " + response.toString());
                }
            } else {
                System.out.println("Error occurred: " + responseCode);
            }

            // Disconnect connection
            connection.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
