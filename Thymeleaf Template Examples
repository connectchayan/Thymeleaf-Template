import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Mono;
import static org.mockito.Mockito.*;

class GithubServiceTest {

    @Mock
    private GithubAuthService githubAuthService;

    @Mock
    private GitHubWebClientService gitHubWebClientService;

    @InjectMocks
    private GithubService githubService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void processBatch_ExistingBranch_CallsCommitFile() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        GithubBranchResponse branchResponse = new GithubBranchResponse();
        when(gitHubWebClientService.fetchBranchByName(branchName, null)).thenReturn(Mono.just(branchResponse));
        when(gitHubWebClientService.commitFile(any(), any(), any())).thenReturn(Mono.just(new GithubUploadResponse()));

        githubService.processBatch(branchName, fileContent, fileName).block();

        verify(gitHubWebClientService, times(1)).commitFile(any(), any(), any());
    }

    @Test
    void processBatch_NonExistingBranch_CallsCreateBranchAndCommitFile() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        when(gitHubWebClientService.fetchBranchByName(branchName, null)).thenReturn(Mono.empty());
        when(gitHubWebClientService.fetchDevelopmentSHA(null)).thenReturn(Mono.just(new GithubBranchResponse()));
        when(gitHubWebClientService.createBranch(any(), any(), any())).thenReturn(Mono.just(new GithubBranchResponse()));
        when(gitHubWebClientService.commitFile(any(), any(), any())).thenReturn(Mono.just(new GithubUploadResponse()));

        githubService.processBatch(branchName, fileContent, fileName).block();

        verify(gitHubWebClientService, times(1)).createBranch(any(), any(), any());
        verify(gitHubWebClientService, times(1)).commitFile(any(), any(), any());
    }

    @Test
    void processBatch_ErrorOccurs_ThrowsResponseStatusException() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        when(gitHubWebClientService.fetchBranchByName(branchName, null)).thenReturn(Mono.error(new RuntimeException("Error")));

        try {
            githubService.processBatch(branchName, fileContent, fileName).block();
        } catch (ResponseStatusException ex) {
            // Verify that a ResponseStatusException with BAD_REQUEST status is thrown
            assertSame(HttpStatus.BAD_REQUEST, ex.getStatus());
            assertEquals("Error", ex.getReason());
        }
    }

    // Add more test cases for other methods...
@Mock
    private GithubAuthService githubAuthService;

    @Mock
    private GitHubWebClientService gitHubWebClientService;

    @InjectMocks
    private GithubService githubService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void getSha_ValidAccessToken_ReturnsShaResponse() {
        String accessToken = "access-token";

        when(githubAuthService.retrieveAccessToken()).thenReturn(Mono.just(new AccessToken(accessToken)));
        when(gitHubWebClientService.fetchDevelopmentSHA(accessToken)).thenReturn(Mono.just(new GithubBranchResponse()));

        githubService.getSha().block();

        verify(gitHubWebClientService, times(1)).fetchDevelopmentSHA(accessToken);
    }

    @Test
    void createBranch_ValidArguments_ReturnsBranchResponse() {
        String branchName = "branch";
        String sha = "sha";
        String accessToken = "access-token";

        when(githubAuthService.retrieveAccessToken()).thenReturn(Mono.just(new AccessToken(accessToken)));
        when(gitHubWebClientService.createBranch(any(), any(), eq(accessToken))).thenReturn(Mono.just(new GithubBranchResponse()));

        githubService.createBranch(branchName, sha).block();

        verify(gitHubWebClientService, times(1)).createBranch(any(), any(), eq(accessToken));
    }

    @Test
    void commitFile_ValidArguments_ReturnsUploadResponse() {
        GithubUploadRequest uploadRequest = new GithubUploadRequest();
        String fileName = "file.txt";
        String accessToken = "access-token";

        when(githubAuthService.retrieveAccessToken()).thenReturn(Mono.just(new AccessToken(accessToken)));
        when(gitHubWebClientService.commitFile(any(), eq(accessToken), eq(fileName))).thenReturn(Mono.just(new GithubUploadResponse()));

        githubService.commitFile(uploadRequest, fileName).block();

        verify(gitHubWebClientService, times(1)).commitFile(any(), eq(accessToken), eq(fileName));
    }

    @Test
    void fetchBranchByName_ValidBranchName_ReturnsBranchResponse() {
        String branchName = "branch";
        String accessToken = "access-token";

        when(githubAuthService.retrieveAccessToken()).thenReturn(Mono.just(new AccessToken(accessToken)));
        when(gitHubWebClientService.fetchBranchByName(eq(branchName), eq(accessToken))).thenReturn(Mono.just(new GithubBranchResponse()));

        githubService.fetchBranchByName(branchName).block();

        verify(gitHubWebClientService, times(1)).fetchBranchByName(eq(branchName), eq(accessToken));
    }

}
