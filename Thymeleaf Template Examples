import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.Mockito.*;

class GithubServiceTest {

    @Mock
    private GithubAuthService githubAuthService;

    @Mock
    private GitHubWebClientService gitHubWebClientService;

    @InjectMocks
    private GithubService githubService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void processBatch_FetchBranchByNameExists_CallsCommitFile() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        GithubBranchResponse branchResponse = new GithubBranchResponse();
        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.just(branchResponse));
        when(githubService.commitFile(any(), any())).thenReturn(Mono.just(new GithubUploadResponse()));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectNextCount(1)
                .verifyComplete();

        verify(githubService, times(1)).commitFile(any(), any());
    }

    @Test
    void processBatch_FetchBranchByNameNotFound_CallsGetShaAndCreateBranchThenCommitFile() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.error(WebClientResponseException.create(HttpStatus.NOT_FOUND).build()));
        when(githubService.fetchDevelopmentSHA()).thenReturn(Mono.just(new GithubBranchResponse()));
        when(githubService.createBranch(any(), any())).thenReturn(Mono.just(new GithubBranchResponse()));
        when(githubService.commitFile(any(), any())).thenReturn(Mono.just(new GithubUploadResponse()));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectNextCount(1)
                .verifyComplete();

        verify(githubService, times(1)).createBranch(any(), any());
        verify(githubService, times(1)).commitFile(any(), any());
    }

    @Test
    void processBatch_ErrorOccurs_ThrowsResponseStatusException() {
        String branchName = "branch";
        String fileContent = "content";
        String fileName = "file.txt";

        when(githubService.fetchBranchByName(branchName)).thenReturn(Mono.error(new RuntimeException("Error")));

        StepVerifier.create(githubService.processBatch(branchName, fileContent, fileName))
                .expectErrorMatches(throwable -> throwable instanceof ResponseStatusException &&
                        ((ResponseStatusException) throwable).getStatus() == HttpStatus.BAD_REQUEST &&
                        throwable.getMessage().equals("Error"))
                .verify();

        verify(githubService, never()).createBranch(any(), any());
        verify(githubService, never()).commitFile(any(), any());
    }
}


import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.io.IOException;

class GitHubWebClientServiceTest {

    private GitHubWebClientService gitHubWebClientService;
    private MockWebServer mockWebServer;

    @BeforeEach
    void setUp() throws IOException {
        // Create a MockWebServer instance
        mockWebServer = new MockWebServer();

        // Start the server
        mockWebServer.start();

        // Get the server URL
        String baseUrl = mockWebServer.url("/").toString();

        // Create a WebClient.Builder instance with the server URL
        WebClient.Builder webClientBuilder = WebClient.builder().baseUrl(baseUrl);

        // Create a GitHubApiConfiguration instance
        GitHubApiConfiguration gitHubApiConfiguration = new GitHubApiConfiguration(baseUrl);

        // Create an instance of the service under test
        gitHubWebClientService = new GitHubWebClientService(webClientBuilder, gitHubApiConfiguration);
    }

    @AfterEach
    void tearDown() throws IOException {
        // Shutdown the MockWebServer
        mockWebServer.shutdown();
    }

    @Test
    void fetchBranchByName_ShouldReturnBranchResponse() {
        // Mock input values
        String ref = "branch-name";
        AccessToken accessToken = new AccessToken("your-access-token");
        String owner = "your-owner";
        String repo = "your-repo";

        // Set up the mock server response
        String responseBody = "{\"name\": \"branch-name\"}";
        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .setBody(responseBody));

        // Execute the method and verify the response using StepVerifier
        Mono<GithubBranchResponse> resultMono = gitHubWebClientService.fetchBranchByName(ref, accessToken, owner, repo);
        StepVerifier.create(resultMono)
                .expectNextMatches(response -> response.getName().equals(ref))
                .verifyComplete();
    }
}


